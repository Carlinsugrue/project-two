/***********************************************************************
 * Exp6_2_LineFollowing_IRSensors -- RedBot Experiment 6
 *
 * This code reads the three line following sensors on A3, A6, and A7
 * and prints them out to the Serial Monitor. Upload this example to your
 * RedBot and open up the Serial Monitor by clicking the magnifying glass
 * in the upper-right hand corner.
 *
 * This is a real simple example of a line following algorithm. It has 
 * a lot of room for improvement, but works fairly well for a curved track. 
 * It does not handle right angles reliably -- maybe you can come up with a 
 * better solution?
 * 
 * This sketch was written by SparkFun Electronics,with lots of help from
 * the Arduino community. This code is completely free for any use.
 *
 * 18 Reb 2015 B. Huang
 ***********************************************************************/
#include <RedBot.h> 
RedBotSensor left = RedBotSensor(A0);   // initialize a left sensor object on A3
RedBotSensor center = RedBotSensor(A1); // initialize a center sensor object on A6
RedBotSensor right = RedBotSensor(A6);  // initialize a right sensor object on A7
// constants that are used in the code. LINETHRESHOLD is the level to detect 
// if the sensor is on the line or not. If the sensor value is greater than this
// the sensor is above a DARK line.
//
// SPEED sets the nominal speed
#define LINETHRESHOLD 700
#define SPEED 100  // sets the nominal speed. Set to any number from 0 - 255.
RedBotMotors motors;
int leftSpeed;   // variable used to store the leftMotor speed
int rightSpeed;  // variable used to store the rightMotor speed
void setup()
{
    Serial.begin(9600);
    delay(2000);
    Serial.println("IR Sensor Readings: ");
    delay(500);
}
void loop()
{
    Serial.print(left.read());
    Serial.print("\t");  // tab character
    Serial.print(center.read());
    Serial.print("\t");  // tab character
    Serial.print(right.read());
    Serial.print("\t");
    Serial.print(leftSpeed);
    Serial.print("\t");
    Serial.print(rightSpeed);
    Serial.println();
    if((left.read() < LINETHRESHOLD) && (center.read() < LINETHRESHOLD) && (right.read() < LINETHRESHOLD) )
    {
        motors.drive(SPEED);
        leftSpeed = SPEED;
        rightSpeed = SPEED;
    }
    else
    {
      if(right.read() > LINETHRESHOLD)
      {
        leftSpeed= -SPEED;
        rightSpeed = SPEED + 50;
       
      }
      
      else if(left.read() > LINETHRESHOLD)
      {
          leftSpeed = SPEED + 50;
          rightSpeed = -SPEED;
      }
      else if(center.read() > LINETHRESHOLD)
      {
          leftSpeed = SPEED; 
          rightSpeed = -SPEED;
      }
      /*switch(random(1))
      {
        case 1:
          motors.leftMotor(-leftSpeed/2);
          motors.rightMotor(rightSpeed/2);
          delay(random(1200,1500));
          break;
        case 0:
          motors.leftMotor(leftSpeed/2);
          motors.rightMotor(-rightSpeed/2);
          delay(random(1200,1500));
          break;
        default:
          break;
      }*/
      motors.leftMotor(-leftSpeed/2);
      motors.rightMotor(rightSpeed/2);
      delay(random(1200,1500));
    }
    
    delay(0);  // add a delay to decrease sensitivity.
}